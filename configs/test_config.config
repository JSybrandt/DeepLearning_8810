target_size: {
  width:256
  height:256
}
# short_side_size: 500

batch_size: 64
epochs: 200

max_people_per_img: 0

model: {

  layers { convolutional {
    filters: 64
    kernel_size { width: 3 height: 3 }
  } }

  layers { pool {
    size { width: 2 height: 2 }
  } }

  layers { convolutional {
    filters: 64
    kernel_size { width: 3 height: 3 }
  } }

  layers { pool {
    size { width: 2 height: 2 }
  } }

  layers { convolutional {
    filters: 64
    kernel_size { width: 3 height: 3 }
  } }

  layers { pool {
    size { width: 2 height: 2 }
  } }


  layers { flatten {}}

  layers { dense { units: 1024 activation: "relu" }}
  layers { dense { units: 512 activation: "relu" }}
  layers { dense { units: 256 activation: "relu" }}
  layers { dense { units: 10 activation: "softmax" }}

  # output is then fit using explicit param

  # The model gets its own output
  optimizer { sgd {
    learning_rate: 0.01
    momentum: 0.5
    nesterov: true
  } }
}

# This system config is specific for a phase 18 node
system {
  # gpus: 2
  workers:16
}
